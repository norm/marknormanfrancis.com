name: Rebuild the website

on:
  push:
    branches:
      - main
  schedule:
    #        min   hr    dom   mon   dow
    - cron: '42    01    *     *     *'     # daily at 1.42am
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'     
        required: false
        default: false

jobs:
  update:
    name: Update
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Configure pip caching
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          sudo apt-get install ripgrep

      # getting errors with the v2 already installed on runners,
      # yet v1 provided by pypi works just fine...
      - name: Install AWS cli tool
        run: |
          pip install awscli

      - name: Setup tmate debugging session
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug_enabled }}

      - name: Quick generate and upload from changes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          make clean
          make baked_css
          make diff_generate
          make diff_test
          make upload

      - name: Generate entire site
        run: |
          make generate
          make test

      - name: Upload site
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          make upload

      - name: Notify on failure
        env:
          TWIST_URL: ${{secrets.TWIST_URL}}
        if: failure()
        run: |
          echo "" | ./script/twist_post FAILURE: $(date +'%Y-%m-%d') Site rebuild

      - name: Register sha on site
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          echo ${GITHUB_SHA::8} > /tmp/last_generated
          aws s3 cp /tmp/last_generated s3://marknormanfrancis.com/last_generated
