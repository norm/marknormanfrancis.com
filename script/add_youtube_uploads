#!/usr/bin/env python

import os
import re
import sys

from dateutil import parser
from django.utils.text import slugify
import requests
import toml

from lib import update_content, tagify

ORIGIN_MAPPING = {
    'UChCfyxtJP1e4eO0v7L1CUJw': 'youtube-mnf',
    'UCI0KNfM-b2vXKPY4QwJ0_oQ': 'youtube-gs',
}


def youtube_api_call(action, **kwargs):
    params = {
        'key': os.environ['YOUTUBE_KEY'],
    }
    params.update(kwargs)
    return requests.get(
        'https://youtube.googleapis.com/youtube/v3/%s' % action,
        params = params,
        headers = {'Accept': 'application/json'},
    )


next_token=''

while next_token is not None:
    videos = youtube_api_call(
            'playlistItems', 
            part='snippet,contentDetails',
            pageToken=next_token,
            maxResults=25,
            playlistId=sys.argv[1],
        )

    for item in videos.json()['items']:
        req = youtube_api_call(
                'videos',
                part='snippet,contentDetails,statistics,topicDetails',
                id=item['contentDetails']['videoId'],
            )
        video = req.json()['items'][0]

        timestamp = parser.parse(video['snippet']['publishedAt'])

        subdir = timestamp.strftime('%Y/%m/%d')
        slug = slugify(video['snippet']['title'])
        path = '%s/%s' % (subdir, slug)
        toml_file = 'source/%s.toml' % path
        try:
            with open(toml_file, 'r') as handle:
                source = toml.load(handle)
        except FileNotFoundError:
            source = {}

        # nothing in these posts should be edited by hand,
        # so updating the entire thing is fair game
        source['title'] = 'Published YouTube video “%s”' % \
                            video['snippet']['title'].replace(' ', ' ')
        source['published'] = timestamp
        source['origin'] = ORIGIN_MAPPING[video['snippet']['channelId']]
        source['origin_link_text'] = '%s channel' % \
                            video['snippet']['channelTitle']
        source['origin_link_url'] = 'https://www.youtube.com/channel/%s' % \
                            video['snippet']['channelId']
        source['type'] = 'video'
        if 'thumbnail' not in source:
            source['thumbnail'] = {}
        for size in video['snippet']['thumbnails']:
            source['thumbnail'][size] = \
                video['snippet']['thumbnails'][size]['url']

        if 'image' not in source:
            try:
                source['image'] = video['snippet']['thumbnails']['maxres']['url']
            except:
                source['image'] = video['snippet']['thumbnails']['high']['url']

        source['youtube'] ={
            'id': item['contentDetails']['videoId'],
            'title': video['snippet']['title'].replace(' ', ' '),
            'description': video['snippet']['description'].replace(' ', ' '),
            'thumbnails': video['snippet']['thumbnails'],
        }

        # use trailing hashtags from the description
        source['tag'] = [
            tagify(word[1:])
                for word in video['snippet']['description'].split()
                    if word.startswith('#')
        ]
        source['youtube']['description'] = re.sub(
                r'(#[\w]+\s*)+\s*$',
                r'',
                source['youtube']['description']
            )

        if video['snippet']['channelTitle'] != 'Mark Norman Francis':
            source['tag'].append(tagify(video['snippet']['channelTitle']))
            source['theme'] = tagify(video['snippet']['channelTitle'])

        source['youtube'].update({
            'views': video['statistics']['viewCount'],
            'likes': video['statistics']['likeCount'],
            'dislikes': video['statistics']['dislikeCount'],
            'comments': video['statistics']['commentCount'],
        })

        update_content(toml_file, toml.dumps(source))

    try:
        next_token=videos.json()['nextPageToken']
    except KeyError:
        next_token = None
