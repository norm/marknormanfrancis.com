#!/usr/bin/env python

"""
Add selected tweets from a list of tweet IDs.
"""

import os
import sys

import pytz
import tweepy

from django.utils.text import slugify
import toml

from lib import update_content
from lib.bucket import Bucket

auth = tweepy.OAuthHandler(
    os.getenv('CONSUMER_KEY'),
    os.getenv('CONSUMER_SECRET')
)
auth.set_access_token(
    os.getenv('TWITTER_TOKEN'),
    os.getenv('TOKEN_SECRET')
)
twitter = tweepy.API(auth)
BUCKET = 'mnf.m17s.net'
bucket = Bucket(BUCKET)


def main():
    global twitter

    with open('data/tweet_ids.txt', 'r') as handle:
        ids = handle.readlines()

    for line in ids:
        entry = line.split(maxsplit=1)
        id = entry[0]
        tweets = get_tweets_from_id(id)

        created = timestamped(tweets[0].created_at)
        updated = timestamped(tweets[-1].created_at)
        date = created.strftime('%Y/%m/%d')

        body = ''
        for tweet in tweets:
            body += tweet_to_markdown(tweet)

        # FIXME quote tweets
        # FIXME retweets
        # FIXME attached images/video
        # FIXME add original data as attachment

        try:
            title = entry[1].rstrip()
            slug = slugify(title)
        except IndexError:
            title = 'Tweet at %s' % created.strftime('%-I:%M%p').lower()
            slug = 'tweet-%s' % tweets[-1].id_str

        post = {
            'tweet_id': tweets[-1].id_str,
            'type': 'tweet',
            'title': title,
            'published': created,
            'retweets': tweets[-1].retweet_count,
            'favourites': tweets[-1].favorite_count,
            'source': 'twitter',
            'source_url': 'https://twitter.com/%s/status/%s' % (
                tweets[-1].author.screen_name,
                tweets[-1].id_str,
            ),
            'images': [],
            'tag': [],
        }

        if 'hashtags' in tweet.entities:
            for tag in tweet.entities['hashtags']:
                post['tag'].append(slugify(tag['text']))

        if 'media' in tweet.entities:
            for media in tweet.entities['media']:
                destination = '%s/%s' % (
                    date,
                    os.path.basename(media['media_url_https']),
                )
                uploaded = bucket.upload_file(
                    media['media_url_https'],
                    destination,
                    check_digest = False,
                )
                if uploaded:
                    print('++', destination)
            post['images'].append('http://%s/%s' % (BUCKET, destination))

        if created != updated:
            post['updated'] = updated

        output = '```\n%s```\n\n%s' % (toml.dumps(post), body)
        output_file = 'source/%s/%s.markdown' % (date, slug)
        update_content(output_file, output)


def get_tweets_from_id(id):
    tweets = []
    tweet = twitter.get_status(id, tweet_mode='extended')
    tweets.insert(0, tweet)
    in_reply_to = tweet.in_reply_to_screen_name
    original_author = tweet.author.screen_name

    while in_reply_to == original_author:
        tweet = twitter.get_status(
            tweet.in_reply_to_status_id,
            tweet_mode='extended',
        )
        tweets.insert(0, tweet)
        in_reply_to = tweet.in_reply_to_screen_name
    return tweets


def tweet_to_markdown(tweet):
    sections = []
    markdown = ''

    if 'urls' in tweet.entities:
        for url in tweet.entities['urls']:
            sections.append(url)
    if 'user_mentions' in tweet.entities:
        for mention in tweet.entities['user_mentions']:
            sections.append(mention)
    if 'hashtags' in tweet.entities:
        for tag in tweet.entities['hashtags']:
            sections.append(tag)

    text_from = 0
    for section in sorted(sections, key=lambda s: s['indices'][0]):
        start = section['indices'][0]
        markdown += tweet.full_text[text_from:start]
        if 'screen_name' in section:
            markdown += '[@%s](%s)' % (
                section['screen_name'],
                'https://twitter.com/%s' % section['screen_name'],
            )
        if 'display_url' in section:
            markdown += '[`%s`](%s)' % (
                section['display_url'],
                section['expanded_url']
            )
        if 'text' in section:
            markdown += '[#%s](/tags/%s/)' % (
                section['text'],
                slugify(section['text'])
            )
        text_from = section['indices'][1]
    if text_from < tweet.display_text_range[1]:
        markdown += tweet.full_text[text_from:tweet.display_text_range[1]]
    return markdown


def timestamped(stamp):
    if not stamp.tzinfo:
        stamp = pytz.timezone('UTC').localize(stamp)
    return stamp


if __name__ == '__main__':
    main()
