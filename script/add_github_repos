#!/usr/bin/env python

from datetime import datetime, timezone
import os
import requests
import toml

from lib import update_content, tagify, get_body_from_source


REPOS_URL='https://api.github.com/users/norm/repos'
ISSUES_URL='https://api.github.com/repos/%s/issues'

def to_timestamp(string):
    stamp = datetime.strptime(string, '%Y-%m-%dT%H:%M:%SZ')
    return stamp.replace(tzinfo=timezone.utc)

def fileify(text):
    text = text.replace('.', '-')
    return tagify(text)

def repo_to_tag(repo):
    if repo.startswith('norm/'):
        repo = repo[5:]
    repo = repo.replace('.', '-')
    return 'repo-' + tagify(repo)


page=0
while True:
    page += 1
    req = requests.get(
        '%s?page=%d' % (REPOS_URL, page),
        headers = {
            'Authorization': 'token %s' % os.environ['GH_ACTIVITY_TOKEN'],
        }
    )

    repos = req.json()
    if len(repos) == 0:
        break

    for repo in repos:
        name = repo['full_name'].split('/')[1]

        front = {
            'title': 'Created GitHub repository %s' % name,
            'published': to_timestamp(repo['created_at']),
            'updated': to_timestamp(repo['updated_at']),
            'origin': 'github',
            'type': 'repository',
            'repository': repo,
            'tag': [repo_to_tag(repo['name'])],
            'pull_requests': 0,
            'issues': 0,
            'subject': 'code',
            'topic': 'repository',
        }

        # expand on issues/pulls
        ireq = requests.get(
                ISSUES_URL % repo['full_name'],
                headers = {
                    'Authorization': 'token %s' % os.environ['GH_ACTIVITY_TOKEN'],
                }
            )
        issues = ireq.json()
        for issue in issues:
            if 'pull_request' in issue:
                front['pull_requests'] += 1
            else:
                front['issues'] += 1

        output_file = 'source/code/repository/%s.markdown' % fileify(name)
        try:
            body = get_body_from_source(output_file)
        except:
            body = '%s\n' % repo['description']

        update_content(
            output_file,
            '```\n%s```\n\n%s' % (toml.dumps(front), body),
        )
